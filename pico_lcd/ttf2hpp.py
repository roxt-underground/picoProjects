#!/usr/bin/env python3
from PIL import Image, ImageFont, ImageDraw
import sys

import logging
logger = logging.getLogger()

class Convert:

    typing = 'uint8_t'
    alphas = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 
        'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', 
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 
        'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
        '0','1','2','3','4','5','6','7','8','9','+','-','.',',','=',':',';')
    font_size = 20
    bg_color =(0,0,0)

    def __init__(self, font_path, header_path):
        self.font_path = font_path
        self.header_path = header_path
    
    def run(self):
        self.font = ImageFont.truetype(self.font_path, self.font_size)

        self.img_h, self.img_w = (26, 24)

        with open(self.header_path, 'wb') as header_output:
            self.output = header_output
            self.init_header()
            self.fill_alphabet()
            self.fill_content()
        
    def init_header(self):
        self.print(f"// theis file autogenerated for {self.font_path}")
        self.print(f"#pragma once\n")
        
        self.print(f"#define {self.base_var_name.upper()}_WIDTH {self.img_w}")
        self.print(f"#define {self.base_var_name.upper()}_HEIGHT {self.img_h}")
        self.print(f'#define {self.arr_size_name} {self.img_h * self.img_w * 2 * len(self.alphas)}')

    def fill_alphabet(self):
        _slash = '\\'
        _double_slash = '\\\\'

        self.print('')
        alpha_len_cons = f'{self.base_var_name.upper()}_ALPHABE_LEN'
        self.print(f'#define {alpha_len_cons} ', len(self.alphas),'\n')
        
        self.print(f'const unsigned char {self.base_var_name}_alphabet[{alpha_len_cons}] = {{')
        for chunk in range(0, len(self.alphas) + 1, 32):
            ender = ''
            if self.alphas[chunk+32:chunk+33]:
                ender = ','
            self.print(' '*4, ','.join(f"'{o.replace(_slash,_double_slash)}'" for o in self.alphas[chunk:chunk+32]), ender)
        self.print("};")

    def fill_content(self):
        self.print('\n')

        self.print(f'{self.typing} {self.base_var_name}_array[{self.arr_size_name}] = {{')

        for ch in self.alphas:
            last_char = (ch == self.alphas[-1])
            self.print(f'// {ch}')
            self.img = Image.new("RGB", (self.img_w, self.img_h), self.bg_color)
            self.draw = ImageDraw.Draw(self.img)
            self.draw.text((0, 0), ch, (255, 255, 255), font=self.font)
            # self.img.show()
            for i in range(self.img_h):
                ender = ','
                if last_char:
                    if i  ==  (self.img_h - 1):
                        ender = ''
                self.print(' ' * 4, f'{self.image_row_to_str(i)}', ender)
        self.print('};')
    
    def image_row_to_str(self, row_num):
        result = []
        for i in range(self.img_w):
            pix = self.std_to_565(self.img.getpixel((i, row_num)))
            result.append(self.pix2uint8(pix))
        return ','.join(result)

    @staticmethod
    def std_to_565(pixel):
        float_pixel = [o/255 for o in pixel]
        r = round(float_pixel[0] * 31)
        g = round(float_pixel[1] * 63)
        b = round(float_pixel[2] * 31)

        return (r << 11 | g << 5 | b)

    @staticmethod
    def pix2str(pixel565):
        return f'{chr(pixel565 >> 8)}{chr(pixel565 & 0xFF)}'
    
    @staticmethod
    def pix2uint8(pixel565):
        return f'{(pixel565 >> 8):>3d},{(pixel565 & 0xFF):<3d}'

    @property
    def base_var_name(self):
        return f'__{(self.font_path.split(".")[0]).replace(" ", "_").replace("-", "_")}'
    
    @property
    def arr_size_name(self):
        return f'{self.base_var_name.upper()}_SIZE'

    def print(self, *args):
        for o in args:
            self.output.write(str(o).encode())
        self.output.write(b'\n')


if __name__ == "__main__":
    convert = Convert(sys.argv[1], sys.argv[2])
    convert.run()
