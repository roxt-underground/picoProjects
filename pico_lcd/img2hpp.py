#!/usr/bin/env python3
from PIL import Image
import sys

import logging
logger = logging.getLogger()

class Convert:

    typing = 'uint8_t'
    
    def __init__(self, image_path, header_path):
        self.image_path = image_path
        self.header_path = header_path
    
    def run(self):
        img = Image.open(self.image_path)
        self.img_h, self.img_w = img.size
        logger.info(f'Image size: {self.img_h}x{self.img_w}')
        self.img = img.convert('RGB')

        with open(self.header_path, 'wb') as header_output:
            self.output = header_output
            self.init_header()
        
    def init_header(self):
        self.print(f"// theis file autogenerated for {self.image_path}")
        self.print(f"#pragma once\n")

        self.print(f"#define {self.base_var_name.upper()}_WIDTH {self.img_w}")
        self.print(f"#define {self.base_var_name.upper()}_HEIGHT {self.img_h}")
        arr_size_name = f'{self.base_var_name.upper()}_SIZE'
        self.print(f'#define {arr_size_name} {self.img_h * self.img_w * 2}')

        self.print('\n\n')
        self.print(f'{self.typing} {self.base_var_name}_array[{arr_size_name}] = {{')

        for i in range(self.img_h):
            ender = ',' if i <  (self.img_h - 1) else '' 
            self.print(' ' * 4, f'{self.image_row_to_str(i)}', ender)
        self.print('};')
    
    def image_row_to_str(self, row_num):
        result = []
        for i in range(self.img_w):
            pix = self.std_to_565(self.img.getpixel((row_num, i)))
            result.append(self.pix2uint8(pix))
        return ','.join(result)

    @staticmethod
    def std_to_565(pixel):
        float_pixel = [o/255 for o in pixel]
        r = round(float_pixel[0] * 31)
        g = round(float_pixel[1] * 63)
        b = round(float_pixel[2] * 31)

        return (r << 11 | g << 5 | b)

    @staticmethod
    def pix2str(pixel565):
        return f'{chr(pixel565 >> 8)}{chr(pixel565 & 0xFF)}'
    
    @staticmethod
    def pix2uint8(pixel565):
        return f'{(pixel565 >> 8):>3d},{(pixel565 & 0xFF):<3d}'

    @property
    def base_var_name(self):
        return f'__{(self.image_path.split(".")[0]).replace(" ", "_")}'
    
    def print(self, *args):
        for o in args:
            self.output.write(str(o).encode())
        self.output.write(b'\n')


if __name__ == "__main__":
    convert = Convert(sys.argv[1], sys.argv[2])
    convert.run()
    